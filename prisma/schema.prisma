generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String  @id @default(cuid())
  firstName String?
  lastName  String?
  image     String?
  bio       String?

  // user
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model User {
  id String @id @default(cuid())

  // auth
  email         String    @unique
  emailVerified DateTime?

  profile Profile?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  // posts
  posts      Post[] @relation("UserAuthorsPost")
  likedPosts Post[] @relation("UserLikesPost")

  // comments
  comments      Comment[] @relation("UserAuthorsComment")
  likedComments Comment[] @relation("UserLikesComment")

  // sent friend requests
  requests         User[] @relation("UserSentFriendRequests")
  requestsRelation User[] @relation("UserSentFriendRequests")

  // accepted friend requests
  friends         User[] @relation("UserFriends")
  friendsRelation User[] @relation("UserFriends")

  // User Account: a user can have multiple accounts
  Account Account[] @relation("UserAccounts")

  // User session:
  Session Session[] @relation("UserSessions")
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String

  // author
  author   User   @relation("UserAuthorsPost", fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  // likes
  likedBy User[] @relation("UserLikesPost")

  // comments
  comments Comment[] @relation("PostHasComment")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  // post
  post   Post   @relation("PostHasComment", fields: [postId], references: [id], onDelete: Cascade)
  postId String

  // user
  author   User   @relation("UserAuthorsComment", fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  // likes
  likedBy User[] @relation("UserLikesComment")

  // comment to comment relation
  parentComment   Comment?  @relation("CommentParentsComment", fields: [parentCommentId], references: [id])
  parentCommentId String?
  childComments   Comment[] @relation("CommentParentsComment")
}

// Information about OAuth accounts associated with a user
model Account {
  id   String @id @default(cuid())
  type String

  provider          String
  providerAccountId String

  refresh_token String? @db.Text
  access_token  String? @db.Text

  expires_at Int?
  token_type String?

  scope    String?
  id_token String? @db.Text

  session_state String?

  // Each account can only have one user
  user   User   @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
}

// Used for database sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  // user
  user   User   @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

// store tokens for passwordless sign in
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
